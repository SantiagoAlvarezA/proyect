package encrypkarch;

import com.sun.pdfview.PDFFile;
import com.sun.pdfview.PDFPage;
import com.sun.pdfview.PagePanel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Event;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import static java.awt.image.ImageObserver.HEIGHT;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import static java.lang.Math.ceil;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.StandardCharsets;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Santiago
 */
public class Main extends javax.swing.JFrame {

    int indice = 1;
    Random random = new Random();

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        inputText.setLineWrap(true);
        outputText.setLineWrap(true);
        InputMap paswd = password.getInputMap(password.WHEN_FOCUSED);
        paswd.put(KeyStroke.getKeyStroke(KeyEvent.VK_V, Event.CTRL_MASK), "null");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputText = new javax.swing.JTextArea();
        clean = new javax.swing.JButton();
        keyGenerate = new javax.swing.JButton();
        cypher = new javax.swing.JButton();
        decipher = new javax.swing.JButton();
        savePassword = new javax.swing.JButton();
        openFolder = new javax.swing.JButton();
        password = new javax.swing.JPasswordField();
        openPassword = new javax.swing.JButton();
        eye = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextArea();
        copyToClipBoard = new javax.swing.JButton();
        saveResult = new javax.swing.JButton();
        copyCryptogram = new javax.swing.JButton();
        information = new javax.swing.JButton();
        manual = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cypher algorithm");
        setPreferredSize(new java.awt.Dimension(1366, 768));

        jPanel1.setMaximumSize(new java.awt.Dimension(this.getWidth(), this.getHeight()));
        jPanel1.setMinimumSize(new java.awt.Dimension(this.getWidth(), this.getHeight()));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Texto original", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 18))); // NOI18N
        jPanel2.setToolTipText("");
        jPanel2.setMinimumSize(new java.awt.Dimension(400, 400));
        jPanel2.setPreferredSize(new java.awt.Dimension(673, 768));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBar(null);

        inputText.setColumns(10);
        inputText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        inputText.setRows(5);
        inputText.setMinimumSize(new java.awt.Dimension(500, 350));
        inputText.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                inputTextMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(inputText);

        clean.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        clean.setText("Limpiar");
        clean.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                cleanMouseMoved(evt);
            }
        });
        clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cleanActionPerformed(evt);
            }
        });

        keyGenerate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        keyGenerate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/key.png"))); // NOI18N
        keyGenerate.setText("Generar una contrase√±a");
        keyGenerate.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                keyGenerateMouseMoved(evt);
            }
        });
        keyGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyGenerateActionPerformed(evt);
            }
        });

        cypher.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cypher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/crypto.png"))); // NOI18N
        cypher.setText("Cifrar");
        cypher.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                cypherMouseMoved(evt);
            }
        });
        cypher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cypherActionPerformed(evt);
            }
        });

        decipher.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        decipher.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/decrypt.png"))); // NOI18N
        decipher.setText("Descifrar");
        decipher.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                decipherMouseMoved(evt);
            }
        });
        decipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decipherActionPerformed(evt);
            }
        });

        savePassword.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        savePassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/save.png"))); // NOI18N
        savePassword.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                savePasswordMouseMoved(evt);
            }
        });
        savePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePasswordActionPerformed(evt);
            }
        });

        openFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/openFolder.png"))); // NOI18N
        openFolder.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                openFolderMouseMoved(evt);
            }
        });
        openFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFolderActionPerformed(evt);
            }
        });

        password.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        password.setToolTipText("");
        password.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                passwordMouseMoved(evt);
            }
        });
        password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordKeyTyped(evt);
            }
        });

        openPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/folderPassword.png"))); // NOI18N
        openPassword.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                openPasswordMouseMoved(evt);
            }
        });
        openPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPasswordActionPerformed(evt);
            }
        });

        eye.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/eye.png"))); // NOI18N
        eye.setAlignmentY(0.0F);
        eye.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                eyeMouseMoved(evt);
            }
        });
        eye.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eyeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(eye, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(password))
                            .addComponent(cypher, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(decipher, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(openPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(keyGenerate)
                                .addGap(26, 26, 26)
                                .addComponent(savePassword))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(clean, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(26, 26, 26)
                        .addComponent(openFolder)))
                .addGap(18, 18, 18))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(clean, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 13, Short.MAX_VALUE))
                    .addComponent(openFolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eye, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(keyGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                    .addComponent(savePassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(password))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cypher, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decipher, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Criptograma / Texto descifrado", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Rounded MT Bold", 0, 18))); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(665, 768));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setHorizontalScrollBar(null);

        outputText.setEditable(false);
        outputText.setColumns(20);
        outputText.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        outputText.setRows(5);
        outputText.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                outputTextMouseMoved(evt);
            }
        });
        jScrollPane3.setViewportView(outputText);

        copyToClipBoard.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        copyToClipBoard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/copy.png"))); // NOI18N
        copyToClipBoard.setText("Copiar");
        copyToClipBoard.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                copyToClipBoardMouseMoved(evt);
            }
        });
        copyToClipBoard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyToClipBoardActionPerformed(evt);
            }
        });

        saveResult.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        saveResult.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/save.png"))); // NOI18N
        saveResult.setText("Guardar");
        saveResult.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                saveResultMouseMoved(evt);
            }
        });
        saveResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(copyToClipBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveResult, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 18, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(copyToClipBoard, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveResult, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        copyCryptogram.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        copyCryptogram.setText("<<");
        copyCryptogram.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        copyCryptogram.setMaximumSize(new java.awt.Dimension(32, 32));
        copyCryptogram.setMinimumSize(new java.awt.Dimension(32, 32));
        copyCryptogram.setPreferredSize(new java.awt.Dimension(32, 32));
        copyCryptogram.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                copyCryptogramMouseMoved(evt);
            }
        });
        copyCryptogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyCryptogramActionPerformed(evt);
            }
        });

        information.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/information.png"))); // NOI18N
        information.setMaximumSize(new java.awt.Dimension(32, 32));
        information.setMinimumSize(new java.awt.Dimension(32, 32));
        information.setPreferredSize(new java.awt.Dimension(32, 32));

        manual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/encrypkarch/Icons/manual.png"))); // NOI18N
        manual.setMaximumSize(new java.awt.Dimension(32, 32));
        manual.setMinimumSize(new java.awt.Dimension(32, 32));
        manual.setPreferredSize(new java.awt.Dimension(32, 32));
        manual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(copyCryptogram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(information, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(manual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 641, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(information, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(84, 84, 84)
                        .addComponent(manual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(copyCryptogram, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 727, Short.MAX_VALUE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResultActionPerformed
        // TODO add your handling code here:
        if (!outputText.getText().isEmpty()) {
            createFileTxt(outputText.getText(), "Result.txt");

        } else {
            JOptionPane.showMessageDialog(null, "No se puede guardar un archivo vacio");
        }
    }//GEN-LAST:event_saveResultActionPerformed

    private void copyToClipBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyToClipBoardActionPerformed
        copyToClipBoard();
    }//GEN-LAST:event_copyToClipBoardActionPerformed

    private void openFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFolderActionPerformed
        openFileTxt("input");
    }//GEN-LAST:event_openFolderActionPerformed

    private void savePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePasswordActionPerformed
        // TODO add your handling code here:
        if (!(String.valueOf(password.getPassword())).isEmpty()) {
            String passwT = "";
            String passwd = JOptionPane.showInputDialog("Digite una contrase√±a");

            int[][] arrayText = arrayText(String.valueOf(password.getPassword()));
            for (int[] fila : arrayText) {
                int[] text = new int[16];
                int i = 0;
                for (int col : fila) {
                    text[i] = col;
                    i++;
                }
                passwT += cifrar(text, arrayPassword(passwd));
            }
            createFileTxt(passwT, ".password");
        } else {
            JOptionPane.showMessageDialog(null, "No se puede guardar un archivo vacio \npor favor genere una contrase√±a");
        }
    }//GEN-LAST:event_savePasswordActionPerformed

    private void decipherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decipherActionPerformed
        if (!inputText.getText().isEmpty() && !(String.valueOf(password.getPassword())).isEmpty()) {
            try {
                int[][] arrayText = arrayCryptogram(inputText.getText());
                String texto = "";
                for (int[] fila : arrayText) {
                    int[] text = new int[16];
                    int i = 0;
                    for (int col : fila) {
                        text[i] = col;
                        i++;
                    }
                    texto += descifrar(text, arrayPassword(String.valueOf(password.getPassword())));

                }
                outputText.setText(texto);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "El criptograma ingresado es inconsistente");
            }
        } else {
            JOptionPane.showMessageDialog(null, "El campo de contrase√±a o entrada de texto estan vacios");
        }
    }//GEN-LAST:event_decipherActionPerformed

    private void cypherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cypherActionPerformed
        if (!inputText.getText().isEmpty() && !(String.valueOf(password.getPassword())).isEmpty()) {
            int[][] arrayText = arrayText(inputText.getText());
            String cryptograma = "";
            for (int[] fila : arrayText) {
                int[] text = new int[16];
                int i = 0;
                for (int col : fila) {
                    text[i] = col;
                    i++;
                }
                try {
                    cryptograma += cifrar(text, arrayPassword(String.valueOf(password.getPassword())));
                } catch (Exception e) {
                    System.out.println(e);
                }

            }

            outputText.setText(cryptograma);

        } else {
            JOptionPane.showMessageDialog(null, "El campo de contrase√±a o entrada de texto estan vacios");
        }
    }//GEN-LAST:event_cypherActionPerformed

    private void keyGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyGenerateActionPerformed
        keyGenerate();
    }//GEN-LAST:event_keyGenerateActionPerformed

    private void cleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cleanActionPerformed
        inputText.setText("");
    }//GEN-LAST:event_cleanActionPerformed

    private void copyCryptogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyCryptogramActionPerformed
        if (!outputText.getText().isEmpty()) {
            inputText.setText(outputText.getText());
            outputText.setText("");
        }
    }//GEN-LAST:event_copyCryptogramActionPerformed

    private void passwordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordKeyTyped
        if ((String.valueOf(password.getPassword())).length() == 16) {
            evt.consume();
        }
    }//GEN-LAST:event_passwordKeyTyped

    private void passwordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordKeyPressed

    private void openPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPasswordActionPerformed
        // TODO add your handling code here:
        openFileTxt("password");
    }//GEN-LAST:event_openPasswordActionPerformed

    private void keyGenerateMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keyGenerateMouseMoved
        // TODO add your handling code here:
        keyGenerate.setToolTipText("Crea una contrase√±a segura para cifrar un texto");
    }//GEN-LAST:event_keyGenerateMouseMoved

    private void savePasswordMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_savePasswordMouseMoved
        // TODO add your handling code here:
        savePassword.setToolTipText("Guardar la contrase√±a");
    }//GEN-LAST:event_savePasswordMouseMoved

    private void openFolderMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openFolderMouseMoved
        // TODO add your handling code here:
        openFolder.setToolTipText("Abrir un archivo txt para cifrar o decifrar");
    }//GEN-LAST:event_openFolderMouseMoved

    private void cypherMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cypherMouseMoved
        // TODO add your handling code here
        cypher.setToolTipText("Cifra un texto usando una contrase√±a");
    }//GEN-LAST:event_cypherMouseMoved

    private void decipherMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_decipherMouseMoved
        // TODO add your handling code here:
        decipher.setToolTipText("Descifra un criptograma usando la contrase√±a que utilizo para cifrar");
    }//GEN-LAST:event_decipherMouseMoved

    private void passwordMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_passwordMouseMoved
        // TODO add your handling code here:
        password.setToolTipText("Digite una contrase√±a segura");
    }//GEN-LAST:event_passwordMouseMoved

    private void openPasswordMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openPasswordMouseMoved
        // TODO add your handling code here:
        openPassword.setToolTipText("Abrir un archivo .password para cargar la contrase√±a de cifrado");

    }//GEN-LAST:event_openPasswordMouseMoved

    private void cleanMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cleanMouseMoved
        // TODO add your handling code here:
        clean.setToolTipText("Limpiar el campo de texto original");
    }//GEN-LAST:event_cleanMouseMoved

    private void copyToClipBoardMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copyToClipBoardMouseMoved
        // TODO add your handling code here:
        copyToClipBoard.setToolTipText("Copiar al portapapeles el contenido [Criptograma / Texto descifrado]");
    }//GEN-LAST:event_copyToClipBoardMouseMoved

    private void saveResultMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveResultMouseMoved
        // TODO add your handling code here:
        saveResult.setToolTipText("Guardar el contenido [Criptograma / Texto descifrado] en un archivo txt");
    }//GEN-LAST:event_saveResultMouseMoved

    private void copyCryptogramMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copyCryptogramMouseMoved
        // TODO add your handling code here:
        copyCryptogram.setToolTipText("Pasar el contenido de [Criptograma / Texto descifrado]  a Texto original");
    }//GEN-LAST:event_copyCryptogramMouseMoved

    private void inputTextMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputTextMouseMoved
        // TODO add your handling code here:
        inputText.setToolTipText("Digite aqu√≠ el texto que desea cifrar o el criptograma que va a decifrar");
    }//GEN-LAST:event_inputTextMouseMoved

    private void outputTextMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputTextMouseMoved
        // TODO add your handling code here:
        outputText.setToolTipText("Aqui se muestra el texto cifrado (Criptograma) o el resultado de haber descifrado un criptograma");
    }//GEN-LAST:event_outputTextMouseMoved

    private void eyeMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eyeMouseMoved
        eye.setToolTipText("Ocultar o mostrar la contrase√±a");
    }//GEN-LAST:event_eyeMouseMoved

    private void eyeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eyeActionPerformed
        // TODO add your handling code here:
        if (eye.getModel().isSelected()) {
            password.setEchoChar((char) 0);
        } else {
            password.setEchoChar('*');
        }
    }//GEN-LAST:event_eyeActionPerformed

    private void manualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualActionPerformed
        // TODO add your handling code here:

        showManual();


    }//GEN-LAST:event_manualActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clean;
    private javax.swing.JButton copyCryptogram;
    private javax.swing.JButton copyToClipBoard;
    private javax.swing.JButton cypher;
    private javax.swing.JButton decipher;
    private javax.swing.JToggleButton eye;
    private javax.swing.JButton information;
    private javax.swing.JTextArea inputText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton keyGenerate;
    private javax.swing.JButton manual;
    private javax.swing.JButton openFolder;
    private javax.swing.JButton openPassword;
    private javax.swing.JTextArea outputText;
    private javax.swing.JPasswordField password;
    private javax.swing.JButton savePassword;
    private javax.swing.JButton saveResult;
    // End of variables declaration//GEN-END:variables

    public int[][] arrayText(String text) {

        byte[] arrayByte = text.getBytes(StandardCharsets.UTF_8);

        //bloques de 16 bytes para el texto**********
        int[][] arrayBlok = new int[(int) ceil(arrayByte.length / 16.0)][16];
        int iArrayBytes = 0, jArrayBytes = 0;

        for (int i = 0; i < arrayByte.length; i++) {
            if (jArrayBytes < 16) {
                arrayBlok[iArrayBytes][jArrayBytes] = arrayByte[i];
                jArrayBytes++;
            } else {
                iArrayBytes++;
                i--;
                jArrayBytes = 0;
            }
        }
        return arrayBlok;
    }

    public int[][] arrayCryptogram(String text) {
        String[] texto = new String[text.length() / 2];
        int t = 0;
        for (int i = 0; i < text.length();) {
            texto[t] = text.substring(i, i + 2);

            i = i + 2;
            t++;
        }
        int[][] arrayBlok = new int[(int) ceil(texto.length / 16.0)][16];
        int iArrayBytes = 0, jArrayBytes = 0;

        for (int i = 0; i < texto.length; i++) {
            if (jArrayBytes < 16) {

                arrayBlok[iArrayBytes][jArrayBytes] = Integer.parseInt(texto[i], 16);
                jArrayBytes++;

            } else {
                iArrayBytes++;
                i--;
                jArrayBytes = 0;
            }
        }

        return arrayBlok;
    }

    public int[] arrayPassword(String text) {
        CifradoClave cifradoClave = new CifradoClave();
        char[] clave = new char[16];
        for (int i = 0; i < text.length(); i++) {
            clave[i] = text.charAt(i);
        }

        byte[][] arrTexto = new byte[4][4];
        for (int i = 0; i < 4; i++) {

            for (int j = 0; j < 4; j++) {
                arrTexto[j][i] = (byte) clave[i * 4 + j]; // convierte clave a cifrar en una matriz 4X4

            }
        }

        cifradoClave.encriptar_cave(arrTexto);

        int[] array = cifradoClave.getClave();

        return array;
    }

    @SuppressWarnings("UnusedAssignment")
    public String descifrar(int[] crypt, int[] passwd) {
        String text = "";
        Descifrado d = new Descifrado();

        byte[] mClaveExp = new byte[256];

        int[] clave = passwd;
        int[] arrTexto = crypt;
        byte[][] texto = new byte[4][4];
        byte[][] mClave = new byte[4][4];

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                mClave[j][i] = (byte) clave[i * 4 + j]; // convierte clave a cifrar en una matriz 4X4
            }
        }

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                texto[j][i] = (byte) arrTexto[i * 4 + j]; // texto a cifrar en una matriz 4X4
            }
        }

        Operaciones aes = new Operaciones();
        byte[] tempRef_mClaveExp = mClaveExp;
        aes.expandirClave(mClave, tempRef_mClaveExp); //expandir la clave y guardarla en un array
        mClaveExp = tempRef_mClaveExp;
        byte[] tempRef_mClaveExp2 = mClaveExp;
        d.desencriptar(texto, mClaveExp);//ciframos el texto
        mClaveExp = tempRef_mClaveExp2;

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (0 != texto[j][i]) {
                    String hex = String.format("%02x", texto[j][i]);
                    int dec = Integer.parseInt(hex, 16);
                    text += (char) dec;
                }
            }
        }

        return text;
    }

    @SuppressWarnings("UnusedAssignment")
    public String cifrar(int[] tex, int[] passwd) {
        String cryptograma = "";
        Cifrado c = new Cifrado();
        byte[] mClaveExp = new byte[256];

        int[] clave = passwd;
        int[] arrTexto = tex;

        byte[][] texto = new byte[4][4];
        byte[][] mClave = new byte[4][4];

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                mClave[j][i] = (byte) clave[i * 4 + j]; // convierte clave a cifrar en una matriz 4X4
            }
        }

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                texto[j][i] = (byte) arrTexto[i * 4 + j]; // texto a cifrar en una matriz 4X4
            }
        }

        Operaciones aes = new Operaciones();
        byte[] tempRef_mClaveExp = mClaveExp;
        aes.expandirClave(mClave, tempRef_mClaveExp); //expandir la clave y guardarla en un array
        mClaveExp = tempRef_mClaveExp;
        byte[] tempRef_mClaveExp2 = mClaveExp;
        c.encriptar(texto, tempRef_mClaveExp2);
        mClaveExp = tempRef_mClaveExp2;

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                String hex = String.format("%02x", texto[j][i]);
                cryptograma += hex;
            }
        }
        return cryptograma;
    }

    //metodo para copiar el resultado al clipboard
    public void copyToClipBoard() {
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        StringSelection data = new StringSelection(outputText.getText());
        clipboard.setContents(data, data);
    }

    //generador de contrase√±as
    public void keyGenerate() {
        String pass = "";
        for (int i = 0; i < 16;) {

            int numero = (random.nextInt(126));
            if (numero > 31) {
                pass += (char) numero;
                i++;
            }

        }
        this.password.setText(pass);
    }

    public void createFileTxt(String data, String nameFile) {
        String path;
        FileWriter flwriter = null;
        BufferedWriter bfwriter;
        try {
            boolean exist = false;
            while (!exist) {

                JFileChooser jFileChooser = new javax.swing.JFileChooser();
                if (jFileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                    path = jFileChooser.getSelectedFile().getAbsolutePath() + nameFile;
                    File file = new File(path);
                    if (!file.exists()) {
                        flwriter = new FileWriter(path);
                        bfwriter = new BufferedWriter(flwriter);
                        bfwriter.write(data);
                        bfwriter.close();
                        exist = true;
                        JOptionPane.showMessageDialog(null, "El archivo se guardo con exito.");
                        if (nameFile.equals("Result")) {
                            outputText.setText("");
                        } else if (nameFile.equals("Password")) {
                            password.setText("");
                        }
                    } else {
                        exist = false;
                        JOptionPane.showMessageDialog(null, "El archivo que estas intentando crear ya existe.");
                    }
                } else {
                    exist = true;
                }
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error " + e);
        } finally {
            if (flwriter != null) {
                try {
                    flwriter.close();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error " + e);
                }
            }
        }
    }

    public void openFileTxt(String type) {
        String path;
        BufferedReader bufferedReader;
        String readLine;

        boolean open = false;
        while (!open) {
            JFileChooser jFileChooser = new JFileChooser();
            FileNameExtensionFilter fileNameExtensionFilter = null;
            //filtrar el tipo de archivos que se pueden abrir
            if (type.equals("password")) {
                fileNameExtensionFilter = new FileNameExtensionFilter("password", "password");
            } else {
                fileNameExtensionFilter = new FileNameExtensionFilter("txt, password", "password", "txt");
            }
            jFileChooser.setFileFilter(fileNameExtensionFilter);

            if (jFileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                inputText.setText("");
                path = jFileChooser.getSelectedFile().getAbsolutePath();
                try {
                    bufferedReader = new BufferedReader(new FileReader(new File(path)));
                    readLine = bufferedReader.readLine();

                    switch (type) {
                        case "input":
                            while (readLine != null) {
                                inputText.append(readLine);
                                readLine = bufferedReader.readLine();
                            }
                            break;
                        case "password":
                            password.setText("");
                            String hex = "";
                            while (readLine != null) {
                                hex += readLine;
                                readLine = bufferedReader.readLine();
                            }
                            int[][] arrayText = arrayCryptogram(hex);
                            String pass = JOptionPane.showInputDialog("Ingrese su contrase√±a");
                            String texto = "";
                            for (int[] fila : arrayText) {
                                int[] text = new int[16];
                                int i = 0;
                                for (int col : fila) {
                                    text[i] = col;
                                    i++;
                                }
                                texto += descifrar(text, arrayPassword(pass));
                            }
                            password.setText(texto);
                            break;
                    }
                    open = true;
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error " + e);
                    open = true;
                }

            } else {
                open = true;
            }
        }
    }

    public void showManual() {

        JPanel panel = new JPanel();
        PagePanel panelpdf = new PagePanel();

        JButton back = new JButton("Back");

        JButton next = new JButton("Next");

        panelpdf.setPreferredSize(new Dimension(500, 600));
        panel.add(back);
        panel.add(panelpdf);
        panel.add(next);

        PDFFile pdffile;

        try {
            //File file = new File ("\\src\\encrypkarch\\Documents\\manual.pdf");
            File file = new File("C:\\Universidad\\Tesis\\Algoritmo\\Prototipos\\EncrypKarch\\src\\encrypkarch\\Documents\\manual.pdf");
            RandomAccessFile raf = new RandomAccessFile(file, "r");
            FileChannel channel = raf.getChannel();
            ByteBuffer buf = channel.map(FileChannel.MapMode.READ_ONLY, 0, channel.size());
            pdffile = new PDFFile(buf);
            PDFPage page = pdffile.getPage(indice);
            panelpdf.setToolTipText("Manual de usuario");
            panelpdf.setBackground(Color.LIGHT_GRAY);
            panelpdf.setSize(1, 1);
            panelpdf.showPage(page);
            
            back.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {

                    if (indice > 0) {
                        indice--;
                        PDFPage page = pdffile.getPage(indice);
                        panelpdf.showPage(page);
                    }

                }
            });

            next.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    if (indice < pdffile.getNumPages()) {
                        indice++;
                        PDFPage page = pdffile.getPage(indice);
                        panelpdf.showPage(page);
                    }

                }

            });

            JOptionPane.showMessageDialog(this, panel, "Manual de usuario", HEIGHT, new ImageIcon());

        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(null, "Error al abrir el archivo" + ioe);
        }

    }

}
